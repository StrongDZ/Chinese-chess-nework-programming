@startuml
title View Leaderboard Sequence Diagram - Chinese Chess (TCP Socket)

skinparam sequenceMessageAlign center
skinparam responseMessageBelowArrow true

actor User
participant "Client" as Client
participant "TCP Socket" as Socket
participant "Server" as Server
database "Database" as DB

note over Client, Server
  TCP connection already established
  from login session
end note

== View Leaderboard ==
User -> Client: Click "Leaderboard" / "Rankings"
activate Client

Client -> Client: Create GetLeaderboardPacket:\n{type="GET_LEADERBOARD",\nsessionID, timeFilter="all-time"}

Client -> Socket: send(GetLeaderboardPacket)
activate Socket
Socket -> Server: Forward packet
deactivate Socket
activate Server

Server -> Server: Validate sessionID

alt Invalid session
    Server -> Socket: send(ERROR_SESSION)
    activate Socket
    Socket -> Client: Forward error
    deactivate Socket
    Client -> User: Show "Session expired, please login"
    deactivate Client
    
else Valid session
    == Fetch Top Players ==
    Server -> DB: SELECT userID, username,\nelo, total_games, wins, losses\nFROM users\nORDER BY elo DESC\nLIMIT 100
    activate DB
    
    alt No players found
        DB --> Server: Empty result
        deactivate DB
        
        Server -> Socket: send(EmptyLeaderboardPacket)
        activate Socket
        Socket -> Client: Forward response
        deactivate Socket
        
        Client -> User: Display "No players yet\nBe the first to play!"
        deactivate Client
        
    else Players found
        DB --> Server: Return top 100 players list:\n[{userID, username, elo,\ntotal_games, wins, losses}...]
        deactivate DB
        
        == Calculate Ranks ==
        Server -> Server: Calculate rank positions:\nrank = 1, 2, 3...\nfor each player
        
        Server -> Server: Find current user rank:\nSELECT COUNT(*) + 1 FROM users\nWHERE elo > currentUser.elo
        
        Server -> Server: Create LeaderboardPacket:\n{status="SUCCESS",\nplayers=[{rank, username, elo,\ngames, win_rate}...],\ncurrent_user_rank=X,\ntotal_players=Y}
        
        Server -> Socket: send(LeaderboardPacket)
        activate Socket
        Socket -> Client: Forward leaderboard data
        deactivate Socket
        
        Client -> Client: Parse leaderboard data
        
        Client -> User: Display leaderboard:\n━━━━━━━━━━━━━━━━━━━━━━━\nRank | Username | ELO | Games | Win%\n━━━━━━━━━━━━━━━━━━━━━━━\n1 🏆 | Player1 | 2100 | 150 | 68%\n2 🥈 | Player2 | 1980 | 120 | 65%\n3 🥉 | Player3 | 1850 | 200 | 62%\n...\nYour Rank: #25\n━━━━━━━━━━━━━━━━━━━━━━━\n[Refresh] [Filter] [Search]
        deactivate Client
        deactivate Server
    end
end

== Filter by Time Period ==
User -> Client: Click "Filter" dropdown
activate Client
Client -> User: Show options:\n- All-time\n- This Month\n- This Week

User -> Client: Select "This Month"

Client -> Client: Create GetLeaderboardPacket:\n{type="GET_LEADERBOARD",\ntimeFilter="month"}

Client -> Socket: send(GetLeaderboardPacket)
activate Socket
Socket -> Server: Forward request
deactivate Socket
activate Server

Server -> DB: SELECT userID, username, elo,\ntotal_games, wins\nFROM users\nWHERE last_game >= DATE_SUB(NOW(), INTERVAL 1 MONTH)\nORDER BY elo DESC\nLIMIT 100
activate DB
DB --> Server: Return monthly top players
deactivate DB

Server -> Server: Calculate ranks for filtered list

Server -> Socket: send(FilteredLeaderboardPacket)
activate Socket
Socket -> Client: Forward filtered data
deactivate Socket

Client -> User: Update display:\nShow "Monthly Rankings"\nwith date range header
deactivate Client
deactivate Server

== Search Specific Player ==
User -> Client: Enter username in search box\n(e.g., "Player123")
activate Client

Client -> Client: Validate input:\nmin 3 characters

alt Input too short
    Client -> User: Show "Enter at least 3 characters"
    deactivate Client
    
else Valid input
    Client -> Client: Create SearchPlayerPacket:\n{type="SEARCH_PLAYER",\nusername="Player123"}
    
    Client -> Socket: send(SearchPlayerPacket)
    activate Socket
    Socket -> Server: Forward search request
    deactivate Socket
    activate Server
    
    Server -> DB: SELECT userID, username,\nelo, rank\nFROM users\nWHERE username LIKE '%Player123%'\nLIMIT 20
    activate DB
    
    alt No matches found
        DB --> Server: Empty result
        deactivate DB
        
        Server -> Socket: send(NoResultsPacket)
        activate Socket
        Socket -> Client: Forward response
        deactivate Socket
        
        Client -> User: Display "No player found\nmatching 'Player123'"
        
    else Players found
        DB --> Server: Return matching players:\n[{userID, username, elo, rank}...]
        deactivate DB
        
        == Calculate Rank for Each ==
        Server -> DB: SELECT COUNT(*) + 1\nFROM users\nWHERE elo > ?\nFOR EACH found player
        activate DB
        DB --> Server: Ranks calculated
        deactivate DB
        
        Server -> Socket: send(SearchResultsPacket)
        activate Socket
        Socket -> Client: Forward results
        deactivate Socket
        
        Client -> Client: Parse search results
        
        Client -> User: Display search results:\n━━━━━━━━━━━━━━━━━\nFound 3 players:\n#25 | Player123 | 1650\n#89 | Player1234 | 1420\n#120 | MyPlayer123 | 1380\n━━━━━━━━━━━━━━━━━\n[Click to view profile]
        
        User -> Client: Click on a player
        Client -> User: Open player profile\n(see viewProfile.puml)
    end
    deactivate Client
    deactivate Server
end

== Manual Refresh ==
User -> Client: Click "Refresh" button
activate Client

Client -> Client: Show loading indicator

Client -> Socket: send(GET_LEADERBOARD{timeFilter})
activate Socket
Socket -> Server: Forward refresh request
deactivate Socket
activate Server

Server -> DB: SELECT userID, username,\nelo, total_games, wins\nFROM users\nORDER BY elo DESC\nLIMIT 100
activate DB
DB --> Server: Return latest leaderboard
deactivate DB

Server -> Server: Calculate updated ranks

Server -> Socket: send(LeaderboardPacket)
activate Socket
Socket -> Client: Forward updated data
deactivate Socket

Client -> Client: Compare with previous data:\n- Highlight rank changes (↑↓)\n- Show new players (NEW badge)\n- Update ELO changes (+15, -8)

Client -> User: Update display\nShow "Refreshed at [time]"\nHighlight changes
deactivate Client
deactivate Server

== View Player Profile ==
User -> Client: Click on a player's name
activate Client

note right
  This triggers the
  "View Profile" flow
  (see viewProfile.puml)
end note

Client -> User: Navigate to player profile
deactivate Client

== Leave Leaderboard ==
User -> Client: Click "Back" button
activate Client

Client -> User: Return to main menu/lobby
deactivate Client

@enduml

∂