@startuml
title Signin Sequence Diagram - Chinese Chess (TCP Socket)

skinparam sequenceMessageAlign center
skinparam responseMessageBelowArrow true

actor User
participant "Client" as Client
participant "TCP Socket" as Socket
participant "Server" as Server
database "Database" as DB

== Establish TCP Connection ==
User -> Client: Open application
activate Client

Client -> Socket: socket(AF_INET, SOCK_STREAM)
activate Socket
Client -> Socket: connect(serverIP, 8080)

Socket -> Server: TCP 3-way handshake\n(SYN â†’ SYN-ACK â†’ ACK)
activate Server

Server -> Server: accept() connection\nCreate thread for client
Socket --> Client: Connection established
deactivate Socket

Client -> User: Display Signin form
deactivate Client

== Signin Authentication ==
User -> Client: Enter username & password
activate Client

Client -> Client: Validate input format

alt Invalid format
    Client -> User: Show "Invalid input format"
    
else Valid format
    Client -> Client: Create SigninPacket:\n{type="SIGNIN", username, password}
    
    Client -> Socket: send(SigninPacket)
    activate Socket
    Socket -> Server: Forward packet
    deactivate Socket
    
    Server -> Server: Parse signin packet
    Server -> DB: SELECT * FROM users\nWHERE username = ?
    activate DB
    
    alt User not found
        DB --> Server: No record
        deactivate DB
        Server -> Server: Create ResponsePacket:\n{status="FAIL", msg="User not found"}
        
        Server -> Socket: send(ResponsePacket)
        activate Socket
        Socket -> Client: Forward response
        deactivate Socket
        Client -> User: Display "User not found"
        
    else User exists
        DB --> Server: Return {id, username, password_hash, elo}
        deactivate DB
        
        Server -> Server: Verify password hash
        
        alt Incorrect password
            Server -> Server: Create ResponsePacket:\n{status="FAIL", msg="Incorrect password"}
            
            Server -> Socket: send(ResponsePacket)
            activate Socket
            Socket -> Client: Forward response
            deactivate Socket
            Client -> User: Display "Incorrect password"
            
        else Correct password
            Server -> Server: Generate sessionID
            
            Server -> DB: UPDATE users SET\nstatus='ONLINE',\nlast_signin=NOW()
            activate DB
            DB --> Server: Updated
            deactivate DB
            
            Server -> Server: Store session:\nsessions[sessionID] = {socket, userID}
            
            Server -> Server: Create ResponsePacket:\n{status="SUCCESS", sessionID,\nuserID, username, elo}
            
            Server -> Socket: send(ResponsePacket)
            activate Socket
            Socket -> Client: Forward response
            deactivate Socket
            
            Client -> Client: Save sessionID
            Client -> User: Show "Signin successful!"
            Client -> User: Redirect to Main Lobby
            
            == Request Lobby Data ==
            Client -> Socket: send(REQUEST_LOBBY)
            activate Socket
            Socket -> Server: Forward request
            deactivate Socket
            
            Server -> DB: SELECT * FROM users\nWHERE status='ONLINE'
            activate DB
            DB --> Server: Return online players list
            deactivate DB
            
            Server -> Socket: send(LobbyDataPacket)
            activate Socket
            Socket -> Client: Forward lobby data
            deactivate Socket
            
            Client -> User: Display online players
        end
    end
end

deactivate Client
deactivate Server

@enduml