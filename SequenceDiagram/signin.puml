@startuml
title Signin Sequence Diagram - Chinese Chess (TCP Socket)

skinparam sequenceMessageAlign center
skinparam responseMessageBelowArrow true

actor User
participant "UI" as UI
participant "TCP Socket" as Socket
participant "Server" as Server
database "Database" as DB

== Signin Authentication ==
User -> UI: Open application
activate UI
UI -> User: Display Signin form
User -> UI: Enter username & password
activate UI

UI -> UI: Validate input format

alt Invalid format
    UI -> User: Show "Invalid input format"
    
else Valid format
    UI -> UI: Create SigninPacket:\n{type="SIGNIN", username, password}
    
    UI -> Socket: send(SigninPacket)
    activate Socket
    Socket -> Server: Forward packet
    deactivate Socket
    
    Server -> Server: Parse signin packet
    Server -> DB: SELECT * FROM users\nWHERE username = ?
    activate DB
    
    alt User not found
        DB --> Server: No record
        deactivate DB
        Server -> Server: Create ResponsePacket:\n{status="FAIL", msg="User not found"}
        
        Server -> Socket: send(ResponsePacket)
        activate Socket
        Socket -> UI: Forward response
        deactivate Socket
        UI -> User: Display "User not found"
        
    else User exists
        DB --> Server: Return {id, username, password_hash, elo}
        deactivate DB
        
        Server -> Server: Verify password hash
        
        alt Incorrect password
            Server -> Server: Create ResponsePacket:\n{status="FAIL", msg="Incorrect password"}
            
            Server -> Socket: send(ResponsePacket)
            activate Socket
            Socket -> UI: Forward response
            deactivate Socket
            UI -> User: Display "Incorrect password"
            
        else Correct password
            Server -> Server: Generate sessionID
            
            Server -> DB: UPDATE users SET\nstatus='ONLINE',\nlast_signin=NOW()
            activate DB
            DB --> Server: Updated
            deactivate DB
            
            Server -> Server: Store session:\nsessions[sessionID] = {socket, userID}
            
            Server -> Server: Create ResponsePacket:\n{status="SUCCESS", sessionID,\nuserID, username, elo}
            
            Server -> Socket: send(ResponsePacket)
            activate Socket
            Socket -> UI: Forward response
            deactivate Socket
            
            UI -> UI: Save sessionID
            UI -> User: Show "Signin successful!"
            UI -> User: Redirect to Main Lobby
        end
    end
end

deactivate UI
deactivate Server

@enduml