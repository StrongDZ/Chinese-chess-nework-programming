@startuml
title Sign Up Sequence Diagram - Chinese Chess (TCP Socket)

skinparam sequenceMessageAlign center
skinparam responseMessageBelowArrow true

actor User
participant "UI" as UI
participant "TCP Socket" as Socket
participant "Server" as Server
database "Database" as DB

== Establish TCP Connection ==
User -> UI: Open application
activate UI

UI -> Socket: socket(AF_INET, SOCK_STREAM)
activate Socket
UI -> Socket: connect(serverIP, 8080)

Socket -> Server: TCP 3-way handshake\n(SYN â†’ SYN-ACK â†’ ACK)
activate Server

Server -> Server: accept() connection\nCreate thread for UI
Socket --> UI: Connection established
deactivate Socket

UI -> User: Display sign up form
deactivate UI

== Sign Up Process ==
User -> UI: Enter registration info:\n- Username\n- Password\n- Email\n- Full name
activate UI

UI -> UI: Validate input format:\n- Username: 3-20 chars, alphanumeric\n- Password: min 6 chars\n- Email: valid format

alt Invalid format
    UI -> User: Show validation errors:\n"Username too short"\n"Invalid email format"
    
else Valid format
    UI -> UI: Hash password:\nhash = SHA256(password)
    
    UI -> UI: Create SignUpPacket:\n{type="SIGNUP",\nusername, passwordHash,\nemail, fullName}
    
    UI -> Socket: send(SignUpPacket)
    activate Socket
    Socket -> Server: Forward packet
    deactivate Socket
    
    Server -> Server: Parse registration packet
    
    == Check Username Availability ==
    Server -> DB: SELECT COUNT(*) FROM users\nWHERE username = ?
    activate DB
    
    alt Username already exists
        DB --> Server: COUNT > 0
        deactivate DB
        
        Server -> Server: Create ResponsePacket:\n{status="FAIL",\nmsg="Username already taken"}
        
        Server -> Socket: send(ResponsePacket)
        activate Socket
        Socket -> UI: Forward response
        deactivate Socket
        
        UI -> User: Display "Username already exists.\nPlease choose another."
        
    else Username available
        DB --> Server: COUNT = 0
        deactivate DB
        
        == Check Email Availability ==
        Server -> DB: SELECT COUNT(*) FROM users\nWHERE email = ?
        activate DB
        
        alt Email already exists
            DB --> Server: COUNT > 0
            deactivate DB
            
            Server -> Server: Create ResponsePacket:\n{status="FAIL",\nmsg="Email already registered"}
            
            Server -> Socket: send(ResponsePacket)
            activate Socket
            Socket -> UI: Forward response
            deactivate Socket
            
            UI -> User: Display "Email already in use.\nPlease use another email."
            
        else Email available
            DB --> Server: COUNT = 0
            deactivate DB
            
            == Create New Account ==
            Server -> Server: Generate userID:\nuserID = UUID()
            
            Server -> Server: Set default values:\nelo = 1200,\nstatus = 'OFFLINE',\ncreated_at = NOW()
            
            Server -> DB: INSERT INTO users\n(userID, username, passwordHash,\nemail, fullName, elo, status,\ncreated_at)
            activate DB
            
            alt Database error
                DB --> Server: INSERT failed
                deactivate DB
                
                Server -> Socket: send(ERROR_DB)
                activate Socket
                Socket -> UI: Forward error
                deactivate Socket
                
                UI -> User: Display "Registration failed.\nPlease try again."
                
            else Insert successful
                DB --> Server: Account created
                deactivate DB
                
                == Initialize User Data ==
                Server -> DB: INSERT INTO user_stats\n(userID, total_games=0,\nwins=0, losses=0, draws=0)
                activate DB
                DB --> Server: Stats initialized
                deactivate DB
                
                Server -> Server: Create ResponsePacket:\n{status="SUCCESS",\nuserID, username,\nmsg="Account created successfully"}
                
                Server -> Socket: send(ResponsePacket)
                activate Socket
                Socket -> UI: Forward response
                deactivate Socket
                
                UI -> User: Show success message:\n"Registration successful!\nYou can now log in."
                
                UI -> UI: Clear form data
                
                == Auto Login Option ==
                UI -> User: Show dialog:\n"Login now?" with\n[Yes] [No] buttons
                
                alt User chooses Yes
                    User -> UI: Click "Yes"
                    UI -> User: Redirect to Login page\nwith username pre-filled
                    
                else User chooses No
                    User -> UI: Click "No"
                    UI -> User: Stay on Sign Up page
                end
            end
        end
    end
end

deactivate UI
deactivate Server

@enduml