@startuml
title View Ready Players Sequence Diagram - Chinese Chess (TCP Socket)

skinparam sequenceMessageAlign center
skinparam responseMessageBelowArrow true

actor User
participant "Client" as Client
participant "TCP Socket" as Socket
participant "Server" as Server
database "Database" as DB

note over Client, Server
  TCP connection already established
  from login session
end note

== Enter Lobby / View Ready Players ==
User -> Client: Navigate to "Lobby" / "Find Players"
activate Client

Client -> Client: Create GetReadyPlayersPacket:\n{type="GET_READY_PLAYERS",\nsessionID, userID}

Client -> Socket: send(GetReadyPlayersPacket)
activate Socket
Socket -> Server: Forward packet
deactivate Socket
activate Server

Server -> Server: Validate sessionID

alt Invalid session
    Server -> Socket: send(ERROR_SESSION)
    activate Socket
    Socket -> Client: Forward error
    deactivate Socket
    Client -> User: Show "Session expired, please login"
    deactivate Client
    
else Valid session
    == Fetch Online Players ==
    Server -> DB: SELECT userID, username,\nelo, status FROM users\nWHERE status = 'ONLINE'\nAND userID != ?\nORDER BY elo DESC
    activate DB
    
    alt No online players
        DB --> Server: Empty result
        deactivate DB
        
        Server -> Socket: send(EmptyListPacket)
        activate Socket
        Socket -> Client: Forward response
        deactivate Socket
        
        Client -> User: Display "No players online\nPlease wait for other players"
        deactivate Client
        
    else Players found
        DB --> Server: Return online players list:\n[{userID, username, elo, status}...]
        deactivate DB
        
        == Check Players Ready Status ==
        Server -> Server: Filter players by status:\n- IN_LOBBY (ready to play)\n- IN_GAME (currently playing)
        
        Server -> Server: Create ReadyPlayersPacket:\n{status="SUCCESS",\nplayers=[\n  {userID, username, elo,\n   player_status, last_active}...\n],\ntotal_online=X}
        
        Server -> Socket: send(ReadyPlayersPacket)
        activate Socket
        Socket -> Client: Forward players list
        deactivate Socket
        
        Client -> Client: Parse players data
        
        Client -> User: Display ready players list:\n━━━━━━━━━━━━━━━━\n👤 Username | ELO | Status\n━━━━━━━━━━━━━━━━\n🟢 Player1 | 1450 | Ready\n🟢 Player2 | 1380 | Ready\n🔴 Player3 | 1520 | In Game\n🟢 Player4 | 1290 | Ready\n━━━━━━━━━━━━━━━━\n[Refresh] [Challenge]
        deactivate Client
        deactivate Server
    end
end

== Auto Refresh / Real-time Updates ==
loop Every 5 seconds OR when player status changes
    Client -> Socket: send(GET_READY_PLAYERS)
    activate Socket
    Socket -> Server: Forward request
    deactivate Socket
    activate Server
    
    Server -> DB: SELECT userID, username,\nelo, status FROM users\nWHERE status IN ('ONLINE', 'IN_LOBBY')\nAND userID != ?
    activate DB
    DB --> Server: Return updated list
    deactivate DB
    
    Server -> Socket: send(UpdatedPlayersPacket)
    activate Socket
    Socket -> Client: Forward updated list
    deactivate Socket
    
    Client -> Client: Compare with previous list:\n- Highlight new players (green)\n- Mark offline players (gray)\n- Update status changes
    
    Client -> User: Update display dynamically
    deactivate Server
end

== Manual Refresh ==
User -> Client: Click "Refresh" button
activate Client

Client -> Socket: send(GET_READY_PLAYERS)
activate Socket
Socket -> Server: Forward request
deactivate Socket
activate Server

Server -> DB: SELECT userID, username,\nelo, status FROM users\nWHERE status = 'ONLINE'\nAND userID != ?
activate DB
DB --> Server: Return latest list
deactivate DB

Server -> Socket: send(ReadyPlayersPacket)
activate Socket
Socket -> Client: Forward list
deactivate Socket

Client -> User: Update display\nShow "List refreshed"
deactivate Client
deactivate Server

== Filter Players by ELO ==
User -> Client: Apply ELO filter\n(e.g., 1200-1500)
activate Client

Client -> Client: Filter local list:\nShow only players in ELO range

Client -> User: Display filtered list
deactivate Client

== Select Player to Challenge ==
User -> Client: Click on a player\nfrom the list
activate Client

Client -> Client: Check player status

alt Player is in game
    Client -> User: Show "Player is currently in game\nPlease select another player"
    
else Player is ready
    Client -> User: Highlight selected player\nShow [Challenge] button enabled
    
    User -> Client: Click "Challenge"
    
    note right
      This triggers the
      "Send Challenge" flow
      (separate sequence diagram)
    end note
    
    Client -> User: Show "Challenge sent to [username]"
end

deactivate Client

== Leave Lobby ==
User -> Client: Click "Back" / "Leave Lobby"
activate Client

Client -> Client: Stop auto-refresh loop

Client -> User: Return to main menu
deactivate Client

@enduml